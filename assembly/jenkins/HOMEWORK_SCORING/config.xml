<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>user_answer_repo</name>
          <description>用户提交作业的repo地址</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>branch</name>
          <description>用户提交作业的repo分支</description>
          <defaultValue>master</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>script</name>
          <description>用来测试用户作业的脚本文本,此项必须为Text Parameter</description>
          <defaultValue></defaultValue>
        </hudson.model.TextParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>callback_url</name>
          <description>脚本结束后，用来写入结果的回调地址</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>stack</name>
          <description>表明用户使用的是哪个【技术栈】</description>
          <defaultValue>javascript</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>image</name>
          <description>用来测试题目的镜像名</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.0.5">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>$user_answer_repo</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>$branch</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <browser class="hudson.plugins.git.browser.AssemblaWeb">
      <url></url>
    </browser>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>SCRIPT=&quot;evaluate-script-${BUILD_NUMBER}.sh&quot;
IMAGE=&quot;$image&quot;

echo $script &gt; $SCRIPT    # save script content to file

sudo docker run --name $CONTAINER --detach $IMAGE /bin/bash -xc &quot;tail -f /dev/null&quot;         # just to hold container running
sudo docker cp . $CONTAINER:/var # copy directory
sudo docker exec -i $CONTAINER bash -c &quot;cd /var &amp;&amp; chmod +x $SCRIPT &amp;&amp;./$SCRIPT&quot; &gt; /tmp/result_detail_$BUILD_NUMBER 2&gt;&amp;1  # evaluate in container

</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher plugin="flexible-publish@0.15.2">
      <publishers>
        <org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
          <condition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition" plugin="run-condition@1.0">
            <worstResult>
              <name>SUCCESS</name>
              <ordinal>0</ordinal>
              <color>BLUE</color>
              <completeBuild>true</completeBuild>
            </worstResult>
            <bestResult>
              <name>SUCCESS</name>
              <ordinal>0</ordinal>
              <color>BLUE</color>
              <completeBuild>true</completeBuild>
            </bestResult>
          </condition>
          <publisherList>
            <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@0.17">
              <buildSteps>
                <hudson.tasks.Shell>
                  <command>result=$(openssl base64 -A &lt; /tmp/result_detail_$BUILD_NUMBER)
version=${GIT_COMMIT}
curl -H Content-Type:application/json -X PUT -d &quot;{\&quot;status\&quot;:4,\&quot;result\&quot;:\&quot;$result\&quot;,\&quot;version\&quot;:\&quot;$version\&quot;}&quot; $callback_url</command>
                </hudson.tasks.Shell>
              </buildSteps>
              <scriptOnlyIfSuccess>true</scriptOnlyIfSuccess>
              <scriptOnlyIfFailure>false</scriptOnlyIfFailure>
              <markBuildUnstable>false</markBuildUnstable>
            </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
          </publisherList>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
          <executionStrategy class="org.jenkins_ci.plugins.flexible_publish.strategy.FailAtEndExecutionStrategy"/>
        </org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
        <org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
          <condition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition" plugin="run-condition@1.0">
            <worstResult>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </worstResult>
            <bestResult>
              <name>FAILURE</name>
              <ordinal>2</ordinal>
              <color>RED</color>
              <completeBuild>true</completeBuild>
            </bestResult>
          </condition>
          <publisherList>
            <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@0.17">
              <buildSteps>
                <hudson.tasks.Shell>
                  <command>file=&quot;/tmp/result_detail_$BUILD_NUMBER&quot;
if [ -f &quot;!$file&quot; ]
then
echo  &quot;仓库不存在，请重新填写仓库地址！&quot; &gt; /tmp/result_detail_$BUILD_NUMBER 2&gt;&amp;1
fi
result=$(openssl base64 -A &lt; /tmp/result_detail_$BUILD_NUMBER)
version=${GIT_COMMIT}
curl -H Content-Type:application/json -X PUT -d &quot;{\&quot;status\&quot;:5,\&quot;result\&quot;:\&quot;$result\&quot;,\&quot;version\&quot;:\&quot;$version\&quot;}&quot; $callback_url</command>
                </hudson.tasks.Shell>
              </buildSteps>
              <scriptOnlyIfSuccess>false</scriptOnlyIfSuccess>
              <scriptOnlyIfFailure>true</scriptOnlyIfFailure>
              <markBuildUnstable>false</markBuildUnstable>
            </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
          </publisherList>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
          <executionStrategy class="org.jenkins_ci.plugins.flexible_publish.strategy.FailAtEndExecutionStrategy"/>
        </org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
        <org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
          <condition class="org.jenkins_ci.plugins.run_condition.core.AlwaysRun" plugin="run-condition@1.0"/>
          <publisherList>
            <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@0.17">
              <buildSteps>
                <hudson.tasks.Shell>
                  <command>sudo docker rm --force $CONTAINER</command>
                </hudson.tasks.Shell>
              </buildSteps>
              <scriptOnlyIfSuccess>false</scriptOnlyIfSuccess>
              <scriptOnlyIfFailure>false</scriptOnlyIfFailure>
              <markBuildUnstable>false</markBuildUnstable>
            </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
          </publisherList>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.0"/>
          <executionStrategy class="org.jenkins_ci.plugins.flexible_publish.strategy.FailAtEndExecutionStrategy"/>
        </org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
      </publishers>
    </org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher>
  </publishers>
  <buildWrappers>
    <EnvInjectBuildWrapper plugin="envinject@1.93.1">
      <info>
        <propertiesContent>PATH=/usr/local/bin/:$PATH
CONTAINER=${stack}_${BUILD_NUMBER}</propertiesContent>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
  </buildWrappers>
</project>